#!/bin/bash

################################
source /boot/config/plugins/cache-mover/cachemoversettings
################################
listupdater="/usr/local/emhttp/plugins/cache-mover/scripts/cache_mover4"

subfolders=$(echo $subfolders | sed 's/ /|/g')
filetypes=$(echo $filetypes | sed 's/ /|/g')
exclusions=$(echo $exclusions | sed 's/ /|/g')

### Check if another instance of this Program is running
sleep 1
pidof -o %PPID -x $0 >/dev/null && echo "ERROR: Program $0 already running" && exit 1

################################
if [ "$unraid_syslog" == "yes" ]; then

log_message() {
  while IFS= read -r line; do
    logger "cache-mover: msm: ${line}"
  done
}
exec > >(log_message) 2>&1

fi

### remove leading trailing slashes
pool="${pool#/}"
pool="${pool%/}"
################################
tmp_openfiles="/usr/local/emhttp/plugins/cache-mover/tmp_openfiles2.txt"
check_openfiles="/usr/local/emhttp/plugins/cache-mover/check_openfiles2.txt"

### rm openfiles
rm $tmp_openfiles 2> /dev/null
rm $check_openfiles 2> /dev/null

################################
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

### lookup config
if [ "$mediaserver_type" == "" ] || [ "$mediaserver_host" == "" ] || [ "$mediaserver_port" == "" ] || [ "$mediaserver_key" == "" ]; then
	echo "please fill all fields, type, host, port, key, aborting here"
	exit;
fi

### emby / jelly openfile
if [ "$mediaserver_type" == "jelly" ] || [ "$mediaserver_type" == "emby" ]; then
	#echo "$mediaserver_type mode"
	wget -q -O - "http://$mediaserver_host:$mediaserver_port/emby/Sessions?api_key=$mediaserver_key" | \
	jq '.[] | {NowPlayingItem: .NowPlayingItem.Path} | select(.NowPlayingItem!=null)' | \
	sed 's|{||g;s|}||g;s|"NowPlayingItem":||g;s|"||g;s|^[ \t]*||;/^[[:space:]]*$/d' | shuf -n 1 \
	> $tmp_openfiles
fi
### plex openfile
if [ "$mediaserver_type" == "plex" ]; then
	#echo "$mediaserver_type mode"
	KEY=$(curl -s "http://$mediaserver_host:$mediaserver_port/status/sessions?X-Plex-Token=$mediaserver_key" 2> /dev/null | grep -oP 'ratingKey="\K[^"]+' | shuf -n 1)
	curl -s "http://$mediaserver_host:$mediaserver_port/library/metadata/$KEY?X-Plex-Token=$mediaserver_key" \
    2> /dev/null | grep -oP 'file="\K[^"]+' | grep -E "$subfolders" | sed '$!d' | \
    python3 -c "import sys, html; print(html.unescape(sys.stdin.read().strip()))"
	> $tmp_openfiles

fi
### check if and then do
if [ -s $tmp_openfiles ]; then
	### rewrite Mediaserver mount path if not 1:1
	if [ -n "$rewrite_source" ]; then
		for rewrite in $rewrite_source
			do
			rew_source=$(echo $rewrite | cut -f1 -d ":")
			rew_target=$(echo $rewrite | cut -f2 -d ":")
			rew_source="${rew_source%/}"
			rew_target="${rew_target%/}"
			sed -i "s|$rew_source|$rew_target|g" $tmp_openfiles
			done
	fi
	### fetch details and build pathes to progress
	shopt -s lastpipe
	cat $tmp_openfiles | while read tmp_openfile
		do
		openfile="/$(echo "${tmp_openfile#*/}")"
		directory=$(dirname "$openfile")
		filename=$(basename "$openfile")
		escaped_filename=$(echo "$filename" | sed 's/\[/\\[/g; s/\]/\\]/g; s/{/\\{/g; s/}/\\}/g')
		diskpath=$(find /mnt/disk* -type f -name "$escaped_filename")
		diskname=$(echo $diskpath | awk '{ print $1; }' | cut -f 3 -d "/")
		if [ "$diskname" == "disks" ]; then
			subdisk=$(echo $openpath | awk '{ print $1; }' | cut -f 4 -d "/")
			diskname="$diskname/$subdisk"
		fi
		poolpath=$(echo ${diskpath/$diskname/$pool})
		rsync_source=$(dirname "$diskpath")
		rsync_target=$(dirname "$poolpath")
		done
	### break if there is no subfolder match
	if [ ! -z "$subfolders" ]; then
		escaped_subfolders=$(echo "$subfolders" | sed 's/\[/\\[/g; s/\]/\\]/g; s/{/\\{/g; s/}/\\}/g')
		if [[ $(cat $tmp_openfiles | grep -E "$escaped_subfolders") == "" ]]; then
			echo "not matching $subfolders, breaking here"
			exit;
		fi
	fi
	### break if there is no filetype match
	if [ ! -z "$filetypes" ]; then
		escaped_filetypes=$(echo "$filetypes" | sed 's/\[/\\[/g; s/\]/\\]/g; s/{/\\{/g; s/}/\\}/g')
		if [[ $(cat $tmp_openfiles | grep -E "$escaped_filetypes") == "" ]]; then
			echo "not matching $filetypes, breaking here"
			exit;
		fi
	fi
	### break if there is a exclusion match
	if [ ! -z "$exclusions" ]; then
		escaped_exclusions=$(echo "$exclusions" | sed 's/\[/\\[/g; s/\]/\\]/g; s/{/\\{/g; s/}/\\}/g')
		if [[ ! $(cat $tmp_openfiles | grep -E "$escaped_exclusions") == "" ]]; then
			echo "matching exclusion $exclusions, breaking here"
			exit;
		fi
	fi
	### pool lookup and break after update access time
	if [ -f "$poolpath" ]; then
		echo "update access time: $rsync_target"
		touch -a "$rsync_target"
		directory=$(dirname "$rsync_target")
		touch -a "$directory"
		exit;
	fi
	### pool only file and break after update access time
	if [ -z "$diskpath" ]; then
		echo "update access time pool only dir: $directory"
		touch -a "$directory"
		directory=$(dirname "$directory")
		touch -a "$directory"
		exit;
	fi
	### copy source files to target dir
	caching_done=""
	if [ ! -f "$poolpath" ]; then
		if [ $rsync_mode == "file" ]; then
			$rsync_copy "$diskpath" "$poolpath"
			if [ "$unraid_note" = "yes" ]; then
				/usr/local/emhttp/webGui/scripts/notify -e "Copy File Info" -s "$rsync_target/" -i "normal" &
			fi
		else
			$rsync_copy "$rsync_source/" "$rsync_target/"
			if [ "$unraid_note" = "yes" ]; then
				/usr/local/emhttp/webGui/scripts/notify -e "Copy Folder Info" -s "$rsync_target/" -i "normal" &
			fi
		fi
		caching_done="ok"
	fi
	### add to mover tuning exclusion
	if [ "$caching_done" = "ok" ]; then
		if [ "$move_excl" = "yes" ]; then
			echo "$rsync_target" >> $move_excl_list  2> /dev/null
			awk -i inplace '!seen[$0]++' $move_excl_list 2> /dev/null
		fi
	fi
	### lookup for open file descriptor if there is a current access
	openfile_disk=$(ls -alrt /proc/[0-9]*/fd/* 2> /dev/null | grep -i "$diskpath" | sed '$!d')
	### switch file descriptor
	if [ ! -z "$openfile_disk" ]; then
		process_id=$(echo $openfile_disk | awk '{ print $9; }' | cut -f 3 -d "/")
		file_descr=$(echo $openfile_disk | awk '{ print $9; }' | cut -f 5 -d "/")
		openpath_disk=$(echo $openfile_disk | awk '{ print $11; }' | cut -f 3 -d "/")
		openpath="$(readlink /proc/$process_id/fd/$file_descr)"
		### hard closing file descriptor path
		if [ "$switch_mode" = "close" ]; then
			echo "$openpath/ open file will be closed"
			fdclose $process_id $file_descr
		fi
		### hard switching file descriptor path
		if [ "$switch_mode" = "switch" ]; then
			echo "open file $filename will be switched $pool now"
			sleep 1
			dst=$(echo ${openpath/$openpath_disk/$pool})
			echo "$dst"
			if gdb --version > /dev/null 2>&1; then
				echo "ready to switch live"
			else
				echo "Unable to find gdb, check readme"
				exit 1
			fi
			(
			echo "attach $process_id"
			echo 'call (int)open("'$dst'", 00|0100|02000, 0666)'
			echo 'call (int)dup2($1,'$file_descr')'
			echo 'call (int)close($1)'
			echo 'detach'; echo 'quit'
			) | gdb -q -x -
		fi
	fi
### done doing
fi
### update mover ignore list ###
$listupdater

exit;
