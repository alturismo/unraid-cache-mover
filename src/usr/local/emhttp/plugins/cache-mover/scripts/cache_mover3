#!/bin/bash

################################
source /boot/config/plugins/cache-mover/cachemoversettings

################################
listupdater="/usr/local/emhttp/plugins/cache-mover/scripts/cache_mover4"

################################
### Check if another instance of this Program is running
pidof -o %PPID -x $0 >/dev/null && echo "ERROR: Program $0 already running" && exit 1

################################
if [ "$unraid_syslog" == "yes" ]; then

log_message() {
  while IFS= read -r line; do
    logger "cache-cleaner: ${line}"
  done
}
exec > >(log_message) 2>&1

fi

################################
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

### check age and move back / delete
IFS=$'\n'
targetdir=""

for folder in $(cat "$move_excl_list")
	do
	find "$folder/" -type d -empty -delete
	if [ -d $folder ]; then
		last_access=$[$(date +%s)-$(stat --printf "%X" "$folder/")]
		last_access=$(echo $last_access | awk '{printf "%d", $1/3600}')
		keephours=""
		if [[ "$folder" =~ "$subfolder_keep_sub/" ]]; then
			keephours=$time_keephours_sub
		else
			keephours=$time_keephours
		fi
		targetdir=$(echo ${folder/$pool/$target_keephours})
		if [ $last_access -gt $keephours ]; then
			if [ -d $targetdir/ ]; then
				if [ $(du -sh $folder/ | sed 's/\s.*$//') == $(du -sh $targetdir/ | sed 's/\s.*$//') ]; then
					echo "$targetdir equal in size, removing from $pool";
					if [ "$use_recycle" = "yes" ]; then
						recycle_target=""
						recycle_target="/mnt/$pool/$recycle_folder/"
						recycle_target="$recycle_target$(ls -d "$folder" | cut -f 4,5,6,7,8,9,10,11,12 -d "/")"
						echo "Recycle to $recycle_target"
						if [ "$unraid_note" = "yes" ]; then
							/usr/local/emhttp/webGui/scripts/notify -e "Recycle Note" -s "$recycle_target/" -i "normal" &
						fi
						mkdir -p "$recycle_target"
						recycle_target=$(dirname $recycle_target)
						mv "$folder/" "$recycle_target/"		## move pool files into recycle dir
						rm -r "$folder/"
					else
						echo "removing $folder"
						if [ "$unraid_note" = "yes" ]; then
							/usr/local/emhttp/webGui/scripts/notify -e "Remove Note" -s "$folder/" -i "normal" &
						fi
						rm -r "$folder/"						## wipe from pool only
					fi
				else
					echo "$folder $last_access ago moving back to existing $target_keephours"
					if [ "$unraid_note" = "yes" ]; then
						/usr/local/emhttp/webGui/scripts/notify -e "Move Note" -s "$targetdir/" -i "normal" &
					fi
					rsync -avzht --mkpath --remove-source-files --progress "$folder/" "$targetdir/"
					#$rsync_move "$folder/" "$targetdir/"		## rsync command variable ?
					## move pool files back to target dir
					find "$folder/" -type d -empty -delete					
				fi
			else
				echo "$folder $last_access ago moving back to $target_keephours"
				if [ "$unraid_note" = "yes" ]; then
					/usr/local/emhttp/webGui/scripts/notify -e "Move Note" -s "$targetdir/" -i "normal" &
				fi
				rsync -avzht --mkpath --remove-source-files --progress "$folder/" "$targetdir/"
				#$rsync_move "$folder/" "$targetdir/"			## rsync command variable ?
				## move pool files back to target dir
				find "$folder/" -type d -empty -delete
			fi
		else
			echo "$folder $last_access still in range"
		fi
	else
		echo "$folder is not there"
		grep -v "$folder" $move_excl_list > temp_show_list && mv temp_show_list $move_excl_list		## remove non existend from list
	fi
	done

### update mover ignore list ###
$listupdater